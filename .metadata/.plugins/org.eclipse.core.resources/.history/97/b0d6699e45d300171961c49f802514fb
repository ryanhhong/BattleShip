import java.beans.ExceptionListener;
import java.beans.XMLEncoder;
import java.io.File;
import java.io.FileOutputStream;
import java.io.FilenameFilter;
import java.io.IOException;
import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.util.Scanner;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerException;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;

import org.w3c.dom.Attr;
import org.w3c.dom.Document;
import org.w3c.dom.Element;

public class FileLoader extends classData implements InterfaceTest {
	public static boolean running = true;
	public static Scanner input = new Scanner(System.in);
	public static FileLoader fl = new FileLoader();
	public static String path = "C:/Users/Ryan Hong/151HW3/hw5/bin";
	public static File f = new File(path); // the directory, really!
	public static String[] files = f.list();
	public static File[] k = f.listFiles();
	public static File[] j = f.listFiles();
	public static Class c;
	public static Class interfaceTest;

	public void loadPackage() throws IOException {
		System.out.println("Gathering class files in " + path);
		FilenameFilter classFilter = new FilenameFilter() {
			public boolean accept(File dir, String name) {
				return name.toLowerCase().endsWith(".class");
			}
		};

		if (files.length == 0) {
			System.out.println("The directory is empty");
		} else {
			int i = 0;
			int removed = 0;
			k = f.listFiles(classFilter);
			for (File file : k) {
				try {
					interfaceTest = Class.forName(file.getName().replace(".class", ""));
				} catch (ClassNotFoundException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				if (!file.getName().contains("$") && !interfaceTest.isInterface()) {
					System.out.println(i + 1 + ". " + file.getName().replace(".class", ""));
					j[i] = file;
					// try and add the class into a new arraylist
					// j[i] = f.
					i++;
				}

			}
			k = f.listFiles(classFilter);
		}
	}

	private static String loadSuperClassName(Class c) {
		String result = null;
		try {
			result = c.getSuperclass().getSimpleName();
		} catch (NullPointerException e) {

		}
		return result;
	}

	public static void mainMenu() throws IOException {
		System.out.println("Welcome to Package Explorer - Main Menu");
		System.out.println("---------------------------------------");
		System.out.println("1. List all classes");
		System.out.println("2. View a class");
		System.out.println("3. Save all classes");
		System.out.println("Enter your choice (1-3) or q to quit");
		if (input.hasNextInt()) {
			int nextInput = input.nextInt();
			if (nextInput == 1) {
				option1();
			}
			if (nextInput == 2) {
				option2();
			}
			if(nextInput == 3){
				System.out.println("Saving All Classes...");
				try
				{
				  DocumentBuilderFactory docFactory = DocumentBuilderFactory.newInstance();
				  DocumentBuilder docBuilder = docFactory.newDocumentBuilder();

				  //root elements
				  Document doc = docBuilder.newDocument();
for(int i = 0; i < j.length;i++){
			File current = j[i];
			

				name = current.getName().replace(".class", "");
				try {
					c = Class.forName(name);
				} catch (ClassNotFoundException e) {

					e.printStackTrace();
				}
				superclass = c.getSuperclass().getName();
				//test.superclass = superclass;
				Class superklass = c.getSuperclass();
				Class[] bb = c.getInterfaces();
				interfaces = new String[bb.length];
				int count2 = 0;
				for (Class b : bb) {
					interfaces[count2] = b.getName();
					count2++;
				}
				superclass = superklass.getName();
				if (interfaces.length != 0) {
					System.out.println("Interface(s): ");
					for (int i1 = 0; i1 < interfaces.length; i1++) {
						
							
							System.out.println("\t" +interfaces[i1]);
						theInterface = theInterface +", "+ interfaces[i1];
					}
				}
				else{
					System.out.print("Interface(s): ");
					System.out.println("none");
				}
				Field[] ff = c.getDeclaredFields();
				fields = new String[ff.length];
				int count4=0;
				for(Field f : ff){
					fields[count4] = f.getName();
					count4++;
				}
				Method[] mm = c.getDeclaredMethods();
				methods = new String[mm.length];
				int count3=0;
				for(Method m : mm){
					methods[count3] = m.getName();
					count3++;
				}
				if (fields.length == 0) {
					System.out.print("Field(s): None");
				} else {
					System.out.print("\n"+"Field(s): ");
					for (int i1 = 0; i1 < fields.length; i1++) {
						
							System.out.println("\n\t "+fields[i1]);
							thefield = thefield +", "+ fields[i1];
					}
				}
				
				if (methods.length == 0) {
				System.out.println("Method(s): None");
			} else {
				System.out.print("\n"+"Method(s): ");
				for (int i1 = 0; i1 < methods.length; i1++) {
					
						System.out.println("\n\t "+methods[i1]);
						theMethod = theMethod +", "+ methods[i1];
				}
			}
				 
				  Element rootElement = doc.createElement(name);
				  doc.appendChild(rootElement);

				  //staff elements
				  Element staff = doc.createElement("Class");
				  rootElement.appendChild(staff);

				  //set attribute to staff element
				  Attr attr = doc.createAttribute("name");
				  attr.setValue(name);
				  staff.setAttributeNode(attr);

				  //shorten way
				  //staff.setAttribute("id", "1");
				  
				  Element classes = doc.createElement("Class");
				  classes.appendChild(doc.createTextNode(name));
				  staff.appendChild(classes);
				  //firstname elements
				  Element superclass1 = doc.createElement("Superclass");
				  superclass1.appendChild(doc.createTextNode(superclass));
				  staff.appendChild(superclass1);

				  //lastname elements
				  Element inturface = doc.createElement("Interfaces");
				  inturface.appendChild(doc.createTextNode(theInterface));
				  staff.appendChild(inturface);

				  //nickname elements
				  Element flds = doc.createElement("Fields");
				  flds.appendChild(doc.createTextNode(thefield));
				  staff.appendChild(flds);

				  //salary elements
				  Element meth = doc.createElement("Methods");
				  meth.appendChild(doc.createTextNode(theMethod));
				  staff.appendChild(meth);
//loop here
				  //write the content into xml file
}
				  TransformerFactory transformerFactory = TransformerFactory.newInstance();
				  Transformer transformer = transformerFactory.newTransformer();
				  DOMSource source = new DOMSource(doc);

				  System.out.println("Please enter the name of the file you are saving");
				  String fileName = input.next();
				  StreamResult result =  new StreamResult(new File("C:/Users/Ryan Hong/151HW3/hw5/bin/"+fileName+".xml"));
				  transformer.transform(source, result);

				  System.out.println("Done");

				}catch(ParserConfigurationException pce){
				  pce.printStackTrace();
				}catch(TransformerException tfe){
				  tfe.printStackTrace();
				}
			}
		} else {
			String nextInput = input.nextLine();
			if (nextInput.equals("q")){
				System.out.println("Good-Bye");
				return;
			}
				
			
		}
	}
	private static void serializeToXML (classData theClass) throws IOException
	{
	    FileOutputStream fos = new FileOutputStream("settings.xml");
	    XMLEncoder encoder = new XMLEncoder(fos);
	    encoder.setExceptionListener(new ExceptionListener() {
	            public void exceptionThrown(Exception e) {
	                System.out.println("Exception! :"+e.toString());
	            }
	    });
	    encoder.writeObject(theClass);
	    encoder.close();
	    fos.close();
	}
	public static void option3(){
		
	}
	public static void option2() throws IOException {
		fl.loadPackage();
		classData test = new classData();
		
		int number = j.length - 1;
		System.out.println(
				"Please enter the number to the corresponding class you would like to view. ( 1 - " + number + " )");
		int nextInput = input.nextInt() - 1;
		File current = j[nextInput];

		name = current.getName().replace(".class", "");
		test.name = name;
		try {
			c = Class.forName(name);
		} catch (ClassNotFoundException e) {

			e.printStackTrace();
		}
		superclass = c.getSuperclass().getName();
		test.superclass = superclass;
		Class superklass = c.getSuperclass();
		String current2 = k[nextInput].getClass().getSuperclass().getName();
		System.out.println("Class Details");
		System.out.println("Name: " + name);
		System.out.println("Superclass: " + superclass);
		Class[] bb = c.getInterfaces();
		interfaces = new String[bb.length];
		int count2 = 0;
		for (Class b : bb) {
			interfaces[count2] = b.getName();
			count2++;
		}
		superclass = superklass.getName();
		if (interfaces.length != 0) {
			System.out.println("Interface(s): ");
			for (int i = 0; i < interfaces.length; i++) {
				
					
					System.out.println("\t" +interfaces[i]);
				theInterface = theInterface +", "+ interfaces[i];
			}
		}
		else{
			System.out.print("Interface(s): ");
			System.out.println("none");
		}
		Field[] ff = c.getDeclaredFields();
		fields = new String[ff.length];
		int count4=0;
		for(Field f : ff){
			fields[count4] = f.getName();
			count4++;
		}
		Method[] mm = c.getDeclaredMethods();
		methods = new String[mm.length];
		int count3=0;
		for(Method m : mm){
			methods[count3] = m.getName();
			count3++;
		}
		if (fields.length == 0) {
			System.out.print("Field(s): None");
		} else {
			System.out.print("\n"+"Field(s): ");
			for (int i = 0; i < fields.length; i++) {
				
					System.out.println("\n\t "+fields[i]);
					thefield = thefield +", "+ fields[i];
			}
		}
		
		if (methods.length == 0) {
		System.out.println("Method(s): None");
	} else {
		System.out.print("\n"+"Method(s): ");
		for (int i = 0; i < methods.length; i++) {
			
				System.out.println("\n\t "+methods[i]);
				theMethod = theMethod +", "+ methods[i];
		}
	}
		System.out.println("Enter \"s\" to save current class or \"q\" to quit to Main Menu...");
		boolean close = false;
		
		while (close == false) {
			String theNextInput = input.next();
			if (theNextInput.equals("q")) {
				mainMenu();
				close = true;
			} else if (theNextInput.equals("s")) {

				System.out.println("Saving...");
				try
				{
				  DocumentBuilderFactory docFactory = DocumentBuilderFactory.newInstance();
				  DocumentBuilder docBuilder = docFactory.newDocumentBuilder();

				  //root elements
				  Document doc = docBuilder.newDocument();

				  Element rootElement = doc.createElement(name);
				  doc.appendChild(rootElement);

				  //staff elements
				  Element staff = doc.createElement("Class");
				  rootElement.appendChild(staff);

				  //set attribute to staff element
				  Attr attr = doc.createAttribute("name");
				  attr.setValue(name);
				  staff.setAttributeNode(attr);

				  //shorten way
				  //staff.setAttribute("id", "1");
				  
				  Element classes = doc.createElement("Class");
				  classes.appendChild(doc.createTextNode(name));
				  staff.appendChild(classes);
				  //firstname elements
				  Element superclass1 = doc.createElement("Superclass");
				  superclass1.appendChild(doc.createTextNode(superclass));
				  staff.appendChild(superclass1);

				  //lastname elements
				  Element inturface = doc.createElement("Interfaces");
				  inturface.appendChild(doc.createTextNode(theInterface));
				  staff.appendChild(inturface);

				  //nickname elements
				  Element flds = doc.createElement("Fields");
				  flds.appendChild(doc.createTextNode(thefield));
				  staff.appendChild(flds);

				  //salary elements
				  Element meth = doc.createElement("Methods");
				  meth.appendChild(doc.createTextNode(theMethod));
				  staff.appendChild(meth);

				  //write the content into xml file
				  TransformerFactory transformerFactory = TransformerFactory.newInstance();
				  Transformer transformer = transformerFactory.newTransformer();
				  DOMSource source = new DOMSource(doc);
				  System.out.println("Please name the file you want to save:");
				  String fileName = input.next();
				  StreamResult result =  new StreamResult(new File("C:/Users/Ryan Hong/151HW3/hw5/bin/"+fileName+".xml"));
				  transformer.transform(source, result);

				  System.out.println(fileName+".xml sucessfully saved");
				  System.out.println("Returning to Main Menu...");
				  mainMenu();
				  
				}catch(ParserConfigurationException pce){
				  pce.printStackTrace();
				}catch(TransformerException tfe){
				  tfe.printStackTrace();
				}
				
				
			} else {
				System.out.println("Please try again... Not a Valid Input.");

			}
		}

	}

	public static void option1() throws IOException {
		fl.loadPackage();
		int number = j.length - 1;
		System.out.println("Enter \"v\" to view details of a class or \"q\" to quit to Main Menu...");
		boolean close = false;
		while (close == false) {
			String nextInput = input.next();
			if (nextInput.equals("q")) {
				mainMenu();
				close = true;
			} else if (nextInput.equals("v")) {

				option2();
			} else {
				System.out.println("Please try again... Not a Valid Input.");

			}
		}
	}

	public static void main(String[] args) throws IOException {

		mainMenu();

	}

}
